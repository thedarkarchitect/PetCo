// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  firstName   String
  lastName    String
  username    String        @unique
  email       String        @unique
  password    String
  role        UserRole      @default(USER)
  comment     Comment[] //one to many
  WishList    WishList[]
  Address     Address[]
  Pet         Pet[]
  Appointment Appointment[]
  Order       Order[]
}

model Post {
  id        Int       @id @default(autoincrement())
  imageUrl  String? //
  title     String //
  content   String //
  comment   Comment[] //one to many
  createdAt DateTime  @default(now()) @db.Date()
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  //foreign key reference post
  post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade) //many to one
  authorId  Int //foreign key reference to user that added the comment
  author    User     @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Date()
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  category    Categories?
  price       Float
  quantity    Int @default(0)
  imageUrl    String?
  WishList    WishList[]
  createdAt   DateTime    @default(now())
}

model Order {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade) //user relation
  userId     Int
  products   Json?
  totalprice Int      @default(0)
  isComplete Boolean  @default(false)
  createAt   DateTime @default(now())
  address    Address? @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  addressId  Int?
}

model WishList {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    Int
  products  Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int

  @@unique([userId, productId])
}

model Address {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId   Int
  district String
  city     String
  street   String
  Order    Order[]
}

model Pet {
  id          Int           @id @default(autoincrement())
  name        String
  type        PetType
  breed       String?
  age         Int?
  ownerId     Int // Reference to the owner (User)
  owner       User          @relation(fields: [ownerId], references: [id])
  Appointment Appointment[]
}

model Appointment {
  id          Int        @id @default(autoincrement())
  petId       Int // Reference to the pet
  pet         Pet        @relation(fields: [petId], references: [id])
  ownerId     Int // Reference to the owner (User)
  owner       User       @relation(fields: [ownerId], references: [id])
  service     PetService
  appointmentDate String
  notes       String?
}

enum Categories {
  PET_FOOD
  PET_SUPPLIES
  PET_FURNITURE
  TOYS
  GROOMING_PRODUCTS
  APPAREL
  TRAINING_AIDS
  HOUSING
  BOOKS_AND_EDUCATIONAL_MATERIALS
  GIFTS_AND_SPECIALTY_ITEMS
}

enum PetService {
  PHOTOGRAPHY
  SPECIALTY_SERVICES
  PET_SITTING
  PET_ADOPTION
  VETERINARY_SERVICES
  PET_TRAINING
  PET_GROOMING
}

enum PetType {
  DOG
  CAT
  BIRD
  FISH
  RABBIT
  OTHER
}

enum UserRole {
  ADMIN
  USER
}
